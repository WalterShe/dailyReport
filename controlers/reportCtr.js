// Generated by CoffeeScript 1.10.0
(function() {
  var Response, check, crypto, getDateStr, reportModel, showPage, userModel, utils;

  crypto = require('crypto');

  check = require('validator').check;

  reportModel = require('../models/reportModel');

  userModel = require('../models/usersModel');

  utils = require('../utils');

  Response = require('../vo/Response').Response;

  exports.index = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return res.redirect("/show");
  };

  exports.writeIndex = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return showPage(req, res, "write");
  };

  exports.settingMobile = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return res.render("mobile/settings", {
      'title': "设置",
      layout: "mobile/layout.hbs"
    });
  };

  exports.writeIndexMobile = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return showPage(req, res, "mobile/write", {
      'title': "写日报",
      layout: "mobile/layout.hbs",
      "currentDateStr": getDateStr(new Date())
    });
  };

  getDateStr = function(date) {
    var month, today, year;
    today = new Date();
    year = date.getFullYear();
    month = date.getMonth() + 1;
    date = date.getDate();
    return year + "-" + month + "-" + date;
  };

  exports.write = function(req, res) {
    var content, date, dateStr, error, error1, months, ref, userId, year;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    dateStr = req.body.date;
    content = req.body.content;
    try {
      check(dateStr).notEmpty();
      check(content).notEmpty();
      ref = dateStr.split("-"), year = ref[0], months = ref[1], date = ref[2];
      check(year).notNull().isNumeric().len(4, 4);
      check(months).notNull().isNumeric().len(1, 2);
      check(date).notNull().isNumeric().len(1, 2);
      return reportModel.createReport(userId, content, dateStr, function(response) {
        return res.send(response);
      });
    } catch (error1) {
      error = error1;
      return res.send(new Response(0, "日期格式不正确或者内容为空"));
    }
  };

  exports.showIndex = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return showPage(req, res, "show");
  };

  exports.showIndexMobile = function(req, res) {
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    return showPage(req, res, "mobile/show", {
      'title': "我的日报",
      layout: "mobile/layout.hbs"
    });
  };

  showPage = function(req, res, pageTitle, data) {
    var userId;
    if (data == null) {
      data = null;
    }
    userId = req.session.userId;
    if (!data) {
      data = {};
    }
    data["hasSubordinate"] = false;
    data["isLoginUser"] = utils.isLoginUser(req);
    data["isAdmin"] = utils.isAdmin(req);
    return userModel.hasSubordinate(userId, function(result) {
      if (result) {
        data["hasSubordinate"] = true;
      }
      return res.render(pageTitle, data);
    });
  };

  exports.showsubordinateIndex = function(req, res) {
    var userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return userModel.hasSubordinate(userId, function(result) {
      if (result) {
        return res.render("showsubordinate", {
          hasSubordinate: true,
          isLoginUser: utils.isLoginUser(req),
          isAdmin: utils.isAdmin(req)
        });
      } else {
        return res.send(new Response(0, '您还没有下属，不需要访问该页面'));
      }
    });
  };

  exports.subordinateIndexMobile = function(req, res) {
    var userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return userModel.hasSubordinate(userId, function(result) {
      if (result) {
        return res.render("mobile/showsubordinate", {
          title: "下属日报",
          layout: "mobile/layout.hbs",
          hasSubordinate: true,
          isLoginUser: utils.isLoginUser(req),
          isAdmin: utils.isAdmin(req)
        });
      } else {
        return res.send(new Response(0, '您还没有下属，不需要访问该页面'));
      }
    });
  };

  exports.getReports = function(req, res) {
    var error, error1, numOfPage, page, userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    page = req.body.page;
    userId = req.body.userId;
    if (!userId) {
      userId = req.session.userId;
    }
    numOfPage = req.body.numOfPage;
    try {
      check(page).isNumeric().min(1);
      check(page).isNumeric().min(1);
      return reportModel.getReports(userId, page, numOfPage, function(response) {
        return res.send(response);
      });
    } catch (error1) {
      error = error1;
      return res.send(new Response(0, "页数和每页显示条数为非负数"));
    }
  };

  exports.getReportNum = function(req, res) {
    var userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.body.userId;
    if (!userId) {
      userId = req.session.userId;
    }
    return reportModel.getReportNum(userId, function(response) {
      return res.send(response);
    });
  };

  exports["delete"] = function(req, res) {
    var reportId, userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    reportId = req.body.reportId;
    return reportModel.deleteReport(userId, reportId, function(response) {
      return res.send(response);
    });
  };

  exports.getSubordinateUserAndDepartment = function(req, res) {
    var userId;
    if (!utils.authenticateUser(req, res)) {
      return;
    }
    userId = req.session.userId;
    return reportModel.getSubordinateUserAndDepartment(userId, function(response) {
      return res.send(response);
    });
  };

}).call(this);
