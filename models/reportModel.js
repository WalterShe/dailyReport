// Generated by CoffeeScript 1.10.0
(function() {
  var Response, getDateNumber, getDepartTreeData, parseDepartments, parseUsers, userModel, utils;

  Response = require('../vo/Response').Response;

  userModel = require('./usersModel');

  utils = require("../utils");

  exports.createReport = function(userId, content, dateStr, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_report_id", function(err, reportId) {
      var score;
      if (err) {
        return utils.showDBError(callback, client);
      }
      score = getDateNumber(dateStr);
      return client.zadd("userid:" + userId + ":reportIds", score, reportId, function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        return client.hmset("userid:" + userId + ":reports", reportId + ":date", dateStr, reportId + ":content", content, function(err, reply) {
          if (err) {
            return utils.showDBError(callback, client);
          }
          client.quit();
          return callback(new Response(1, 'success', reply));
        });
      });
    });
  };

  getDateNumber = function(dateStr) {
    var date, months, ref, year;
    ref = dateStr.split("-"), year = ref[0], months = ref[1], date = ref[2];
    if (months.length === 1) {
      months = "0" + months;
    }
    if (date.length === 1) {
      date = "0" + date;
    }
    return parseInt("" + year + months + date);
  };

  exports.getReports = function(userId, page, numOfPage, callback) {
    var client, end, start;
    client = utils.createClient();
    start = numOfPage * (page - 1);
    if (start < 0) {
      start = 0;
    }
    end = (numOfPage * page) - 1;
    return client.zrevrange("userid:" + userId + ":reportIds", start, end, function(err, reportIds) {
      var contentArgs, dateArgs, j, len1, reportId;
      if (err) {
        return utils.showDBError(callback, client);
      }
      if (reportIds && reportIds.length === 0) {
        return callback(new Response(1, 'success', []));
      }
      dateArgs = ["userid:" + userId + ":reports"];
      contentArgs = ["userid:" + userId + ":reports"];
      for (j = 0, len1 = reportIds.length; j < len1; j++) {
        reportId = reportIds[j];
        dateArgs.push(reportId + ":date");
        contentArgs.push(reportId + ":content");
      }
      return client.hmget(dateArgs, function(err, dates) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        return client.hmget(contentArgs, function(err, contents) {
          var i, k, len, ref, response;
          if (err) {
            return utils.showDBError(callback, client);
          }
          len = contents.length;
          response = [];
          for (i = k = 0, ref = len; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
            response.push({
              id: reportIds[i],
              date: dates[i],
              content: contents[i]
            });
          }
          client.quit();
          return callback(new Response(1, 'success', response));
        });
      });
    });
  };

  exports.getReportNum = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.zcount("userid:" + userId + ":reportIds", "-inf", "+inf", function(err, count) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, 'success', count));
    });
  };

  exports.deleteReport = function(userId, reportId, callback) {
    var client;
    client = utils.createClient();
    return client.zrem("userid:" + userId + ":reportIds", reportId, function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      return client.hdel("userid:" + userId + ":reports", reportId + ":date", reportId + ":content", function(err, reply) {
        if (err) {
          return utils.showDBError(callback, client);
        }
        client.quit();
        return callback(new Response(1, 'success', reply));
      });
    });
  };

  exports.getSubordinateUserAndDepartment = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, users) {
      var children, getSubordinateIds, j, k, len1, len2, ref, subordinateIds, subordinateUsers, user, userArray, userObjs, userTree;
      if (err) {
        return utils.showDBError(callback, client);
      }
      ref = parseUsers(users), userObjs = ref[0], userArray = ref[1];
      userTree = getDepartTreeData(userArray, {});
      subordinateIds = [];
      children = [];
      for (j = 0, len1 = userTree.length; j < len1; j++) {
        user = userTree[j];
        if (user["id"] === userId) {
          children = user["children"];
          break;
        }
      }
      getSubordinateIds = function(children, subordinateIds) {
        var k, len2, results;
        results = [];
        for (k = 0, len2 = children.length; k < len2; k++) {
          user = children[k];
          subordinateIds.push(user["id"]);
          if (user["children"]) {
            results.push(getSubordinateIds(user["children"], subordinateIds));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      getSubordinateIds(children, subordinateIds);
      subordinateUsers = [];
      for (k = 0, len2 = subordinateIds.length; k < len2; k++) {
        userId = subordinateIds[k];
        subordinateUsers.push(userObjs[userId]);
      }
      return client.hgetall("departments", function(err, departments) {
        var _, department, departmentId, departmentObjs, departmentTree, getUserDepartmentTreeData, l, len3, ref1, subordinateDepartmentObjs, subordinateDepartments;
        if (err) {
          return utils.showDBError(callback, client);
        }
        ref1 = parseDepartments(departments), departmentObjs = ref1[0], _ = ref1[1];
        subordinateDepartmentObjs = {};
        for (l = 0, len3 = subordinateUsers.length; l < len3; l++) {
          user = subordinateUsers[l];
          if (user["departmentId"]) {
            departmentId = user["departmentId"];
            subordinateDepartmentObjs[departmentId] = departmentObjs[departmentId];
          }
        }
        subordinateDepartments = [];
        for (_ in subordinateDepartmentObjs) {
          department = subordinateDepartmentObjs[_];
          subordinateDepartments.push(department);
        }
        departmentTree = getDepartTreeData(subordinateDepartments, subordinateDepartmentObjs);
        getUserDepartmentTreeData = function(departmentTree) {
          var len4, len5, m, n, results;
          results = [];
          for (m = 0, len4 = departmentTree.length; m < len4; m++) {
            department = departmentTree[m];
            if (!department["node"]) {
              continue;
            }
            departmentId = department["id"];
            if (department["children"] == null) {
              department["children"] = [];
            }
            for (n = 0, len5 = subordinateUsers.length; n < len5; n++) {
              user = subordinateUsers[n];
              if (user["departmentId"] !== departmentId) {
                continue;
              }
              department["children"].push({
                id: user["id"],
                label: user["name"]
              });
            }
            if (department["children"]) {
              results.push(getUserDepartmentTreeData(department["children"]));
            } else {
              results.push(void 0);
            }
          }
          return results;
        };
        getUserDepartmentTreeData(departmentTree);
        client.quit();
        return callback(new Response(1, 'success', departmentTree));
      });
    });
  };

  parseUsers = function(data) {
    var childOfKey, key, key2, result, resultObj, userId, value, value2;
    resultObj = {};
    for (key in data) {
      value = data[key];
      childOfKey = key.split(":");
      userId = childOfKey[0];
      if (resultObj[userId] == null) {
        resultObj[userId] = {
          id: userId
        };
      }
      if (childOfKey[1] === "user_name") {
        resultObj[userId]["name"] = value;
      } else if (childOfKey[1] === "department_id") {
        resultObj[userId]["departmentId"] = value;
      } else if (childOfKey[1] === "superior_id") {
        resultObj[userId]["pid"] = value;
      }
    }
    result = [];
    for (key2 in resultObj) {
      value2 = resultObj[key2];
      result.push(value2);
    }
    return [resultObj, result];
  };

  parseDepartments = function(data) {
    var childOfKey, departmentId, key, key2, result, resultObj, value, value2;
    resultObj = {};
    for (key in data) {
      value = data[key];
      childOfKey = key.split(":");
      departmentId = childOfKey[0];
      if (resultObj[departmentId] == null) {
        resultObj[departmentId] = {
          id: departmentId
        };
      }
      if (childOfKey[1] === "name") {
        resultObj[departmentId]["name"] = value;
      } else if (childOfKey[1] === "pid") {
        resultObj[departmentId]["pid"] = value;
      }
    }
    result = [];
    for (key2 in resultObj) {
      value2 = resultObj[key2];
      result.push(value2);
    }
    return [resultObj, result];
  };

  getDepartTreeData = function(departs, allObjs) {
    var findChidren, j, k, len1, len2, node, rootnode, treeData, value;
    treeData = [];
    for (j = 0, len1 = departs.length; j < len1; j++) {
      value = departs[j];
      rootnode = {
        label: value.name,
        id: value.id,
        node: 1
      };
      if (!(value.pid && allObjs[value.pid])) {
        treeData.push(rootnode);
      }
    }
    findChidren = function(node, departs) {
      var childNode, k, len2, results;
      results = [];
      for (k = 0, len2 = departs.length; k < len2; k++) {
        value = departs[k];
        if (value.pid === node.id) {
          if (!node.children) {
            node.children = [];
          }
          childNode = {
            label: value.name,
            id: value.id,
            node: 1
          };
          node.children.push(childNode);
          results.push(findChidren(childNode, departs));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };
    for (k = 0, len2 = treeData.length; k < len2; k++) {
      node = treeData[k];
      findChidren(node, departs);
    }
    return treeData;
  };

}).call(this);
