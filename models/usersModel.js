// Generated by CoffeeScript 1.10.0
(function() {
  var Response, getUsersWithoutPassword, utils;

  Response = require('../vo/Response').Response;

  utils = require("../utils");

  exports.createUser = function(userName, password, departmentId, superiorId, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_user_id", function(err, reply) {
      var replycallback, userId;
      if (err) {
        return utils.showDBError(callback, client);
      }
      userId = "" + reply;
      replycallback = function(err, reply) {
        var data;
        if (err) {
          return utils.showDBError(callback, client);
        }
        client.quit();
        if (superiorId) {
          data = {
            id: userId,
            userName: userName,
            departmentId: departmentId,
            superiorId: superiorId
          };
        } else {
          data = {
            id: userId,
            userName: userName,
            departmentId: departmentId
          };
        }
        return callback(new Response(1, 'success', data));
      };
      if (superiorId) {
        return client.hmset("users", userId + ":user_name", userName, userId + ":password", password, userId + ":department_id", departmentId, userId + ":superior_id", superiorId, replycallback);
      } else {
        return client.hmset("users", userId + ":user_name", userName, userId + ":password", password, userId + ":department_id", departmentId, replycallback);
      }
    });
  };

  exports.createDefaultAdmin = function(userName, password, callback) {
    var client;
    client = utils.createClient();
    return client.incr("next_user_id", function(err, nextUserId) {
      var userId;
      if (err) {
        return utils.showDBError(callback, client);
      }
      userId = "" + nextUserId;
      return client.hmset("users", userId + ":user_name", userName, userId + ":password", password, function(err, reply) {
        return client.sadd("administrators", userId, function(err, reply) {
          if (err) {
            return utils.showDBError(callback, client);
          }
          client.quit();
          return callback(new Response(1, "success", reply));
        });
      });
    });
  };

  exports.updateUser = function(userId, userName, password, departmentId, superiorId, callback) {
    var client, replycallback;
    client = utils.createClient();
    replycallback = function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      return client.hgetall("users", function(err, reply) {
        var users;
        if (err) {
          return utils.showDBError(callback, client);
        }
        client.quit();
        users = getUsersWithoutPassword(reply);
        return callback(new Response(1, "success", users));
      });
    };
    if (superiorId && password) {
      return client.hmset("users", userId + ":user_name", userName, userId + ":password", password, userId + ":department_id", departmentId, userId + ":superior_id", superiorId, replycallback);
    } else if (superiorId) {
      return client.hmset("users", userId + ":user_name", userName, userId + ":department_id", departmentId, userId + ":superior_id", superiorId, replycallback);
    } else if (password) {
      return client.hmset("users", userId + ":user_name", userName, userId + ":password", password, userId + ":department_id", departmentId, replycallback);
    } else {
      return client.hmset("users", userId + ":user_name", userName, userId + ":department_id", departmentId, replycallback);
    }
  };

  exports.getAllUsers = function(callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, reply) {
      var users;
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      users = getUsersWithoutPassword(reply);
      return callback(new Response(1, "success", users));
    });
  };

  exports.getAllUsersWithPassword = function(callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, users) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, "success", users));
    });
  };

  exports.removeUser = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.hdel("users", userId + ":user_name", userId + ":password", userId + ":department_id", userId + ":superior_id", function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      return client.hgetall("users", function(err, reply) {
        var childOfKey, key, newUsers, value;
        if (err) {
          return utils.showDBError(callback, client);
        }
        newUsers = getUsersWithoutPassword(reply);
        for (key in newUsers) {
          value = newUsers[key];
          childOfKey = key.split(":");
          if (childOfKey[1] === "superior_id" && value === userId) {
            client.hdel("users", key);
          } else {
            newUsers[key] = value;
          }
        }
        client.quit();
        return callback(new Response(1, "success", newUsers));
      });
    });
  };

  getUsersWithoutPassword = function(users) {
    var childOfKey, filterUsers, key, value;
    filterUsers = {};
    for (key in users) {
      value = users[key];
      childOfKey = key.split(":");
      if (childOfKey[1] !== "password") {
        filterUsers[key] = value;
      }
    }
    return filterUsers;
  };

  exports.hasSubordinate = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, users) {
      var childOfKey, key, result, value;
      if (err) {
        return utils.showDBError(callback, client);
      }
      result = false;
      for (key in users) {
        value = users[key];
        childOfKey = key.split(":");
        if (childOfKey[1] === "superior_id" && value === userId) {
          result = true;
          break;
        }
      }
      client.quit();
      return callback(result);
    });
  };

  exports.getAdminIds = function(callback) {
    var client;
    client = utils.createClient();
    return client.smembers("administrators", function(err, ids) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, "success", ids));
    });
  };

  exports.setAdmin = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.sadd("administrators", userId, function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, "success", reply));
    });
  };

  exports.deleteAdmin = function(userId, callback) {
    var client;
    client = utils.createClient();
    return client.srem("administrators", userId, function(err, reply) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      client.quit();
      return callback(new Response(1, "success", reply));
    });
  };

  exports.hasUser = function(userName, callback) {
    var client;
    client = utils.createClient();
    return client.hgetall("users", function(err, users) {
      var _, key, property, ref, result, value;
      if (err) {
        return utils.showDBError(callback, client);
      }
      result = false;
      client.quit();
      for (key in users) {
        value = users[key];
        ref = key.split(":"), _ = ref[0], property = ref[1];
        if (property === "user_name" && value === userName) {
          result = true;
          break;
        }
      }
      return callback(new Response(1, "success", result));
    });
  };

  exports.changePassword = function(userId, newPassword, oldPassword, callback) {
    var client;
    client = utils.createClient();
    return client.hget("users", userId + ":password", function(err, password) {
      if (err) {
        return utils.showDBError(callback, client);
      }
      if (oldPassword === password) {
        return client.hset("users", userId + ":password", newPassword, function(err, password) {
          if (err) {
            return utils.showDBError(callback, client);
          }
          client.quit();
          return callback(new Response(1, "success", 1));
        });
      } else {
        return callback(new Response(1, "success", 0));
      }
    });
  };

}).call(this);
