// Generated by CoffeeScript 1.10.0
(function() {
  var TreeList, TreeList2, TreeListBase,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  TreeListBase = (function() {
    function TreeListBase(containerNode, dataSource) {
      var self;
      this.containerNode = containerNode;
      this.dataSource = dataSource != null ? dataSource : null;
      this.editingItem = null;
      $(this.containerNode).addClass("treeList");
      $(this.containerNode).on("mouseenter", "li div", function(event) {
        if ($(this) !== this.editingItem) {
          return $(this).addClass('treeListItemOver');
        }
      });
      $(this.containerNode).on("mouseleave", "li div", function(event) {
        if ($(this) !== this.editingItem) {
          return $(this).removeClass('treeListItemOver');
        }
      });
      this.treeNodes = {};
      self = this;
      $(this.containerNode).on("click", "li i.icon-circle-arrow-right", function(event) {
        var name;
        event.stopImmediatePropagation();
        $(this).addClass('icon-circle-arrow-down').removeClass('icon-circle-arrow-right');
        name = $(this).parent().parent().attr("id");
        $("#" + name).append(self.treeNodes[name]);
        delete self.treeNodes[name];
        if (self.editingItem) {
          return $(self.containerNode + " span.update, " + self.containerNode + " span.delete").hide();
        } else {
          return $(self.containerNode + " span.update, " + self.containerNode + " span.delete").show();
        }
      });
      $(this.containerNode).on("click", "li i.icon-circle-arrow-down", function(event) {
        var name;
        event.stopImmediatePropagation();
        $(this).addClass('icon-circle-arrow-right').removeClass('icon-circle-arrow-down');
        name = $(this).parent().parent().attr("id");
        return self.treeNodes[name] = $(this).parent().next().detach();
      });
    }

    TreeListBase.prototype.show = function(dataSource) {
      var _, name, ref, results, ul;
      this.dataSource = dataSource;
      $(this.containerNode).empty();
      this.renderTree(this.containerNode, this.getDepartTreeData());
      ref = this.treeNodes;
      results = [];
      for (name in ref) {
        _ = ref[name];
        ul = $("#" + name).find("ul:first");
        ul.prev().find("i:first").addClass('icon-plus-sign').removeClass('icon-minus-sign');
        results.push(this.treeNodes[name] = ul.detach());
      }
      return results;
    };

    TreeListBase.prototype.showEditingItem = function() {
      if (!this.editingItem) {
        return;
      }
      this.editingItem.parent().removeClass('treeListItemSelected');
      $(this.containerNode + " span.update, " + this.containerNode + " span.delete").show();
      return this.editingItem = null;
    };

    TreeListBase.prototype.getEditingItemId = function() {
      if (!this.editingItem) {
        return null;
      }
      return this.editingItem.parent().attr('id');
    };

    TreeListBase.prototype.renderTree = function(node, data) {
      throw new Error("renderTree method must implement in child class.");
    };

    TreeListBase.prototype.getDepartTreeData = function() {
      var departs, findChidren, i, j, len, len1, node, rootnode, treeData, value;
      departs = this.dataSource;
      treeData = [];
      for (i = 0, len = departs.length; i < len; i++) {
        value = departs[i];
        rootnode = {
          label: value.name,
          id: value.id
        };
        if (!value.pid) {
          treeData.push(rootnode);
        }
      }
      findChidren = function(node, departs) {
        var childNode, j, len1, results;
        results = [];
        for (j = 0, len1 = departs.length; j < len1; j++) {
          value = departs[j];
          if (value.pid === node.id) {
            if (!node.children) {
              node.children = [];
            }
            childNode = {
              label: value.name,
              id: value.id
            };
            node.children.push(childNode);
            results.push(findChidren(childNode, departs));
          } else {
            results.push(void 0);
          }
        }
        return results;
      };
      for (j = 0, len1 = treeData.length; j < len1; j++) {
        node = treeData[j];
        findChidren(node, departs);
      }
      return treeData;
    };

    return TreeListBase;

  })();

  TreeList = (function(superClass) {
    extend(TreeList, superClass);

    function TreeList(containerNode, dataSource) {
      this.containerNode = containerNode;
      this.dataSource = dataSource != null ? dataSource : null;
      TreeList.__super__.constructor.call(this, this.containerNode, this.dataSource = null);
      this.iconName = "book";
      $(this.containerNode).on("click", "span.update", (function(_this) {
        return function(event) {
          var t, updateEvent;
          t = $(event.target);
          t.parent().removeClass('treeListItemOver').addClass('treeListItemSelected');
          $(_this.containerNode + " span.update, " + _this.containerNode + " span.delete").hide();
          if (_this.editingItem) {
            _this.editingItem.parent().removeClass('treeListItemSelected');
          }
          _this.editingItem = t;
          updateEvent = jQuery.Event("update");
          updateEvent["itemId"] = t.parent().attr('id');
          return $(_this.containerNode).trigger(updateEvent);
        };
      })(this));
      $(this.containerNode).on("click", "span.delete", (function(_this) {
        return function(event) {
          var deleteEvent, t;
          t = $(event.target);
          deleteEvent = jQuery.Event("delete");
          deleteEvent["itemId"] = t.parent().attr('id');
          return $(_this.containerNode).trigger(deleteEvent);
        };
      })(this));
    }

    TreeList.prototype.show = function(dataSource, iconName) {
      this.dataSource = dataSource;
      this.iconName = iconName;
      console.log(this.iconName);
      return TreeList.__super__.show.call(this, this.dataSource);
    };

    TreeList.prototype.renderTree = function(node, data) {
      var i, len, linode, newnode, newnode2, value;
      $(node).append("<ul></ul>");
      newnode = node + " ul:first";
      for (i = 0, len = data.length; i < len; i++) {
        value = data[i];
        linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><i class='icon-" + this.iconName + "' /><span class='nodename'>" + value.label + "</span><span class='delete btn btn-danger'>删除</span><span class='update btn btn-warning'>编辑</span></div></li>";
        if (value.children) {
          linode = "<li id='" + value.id + "node'><div id='" + value.id + "'><i class='icon-circle-arrow-down' /><i class='icon-" + this.iconName + "' /><span class='nodename'>" + value.label + "</span><span class='delete btn btn-danger'>删除</span><span class='update btn btn-warning'>编辑</span></div></li>";
        }
        $(newnode).append(linode);
        newnode2 = newnode + " #" + value.id + "node";
        if (value.children) {
          this.renderTree(newnode2, value.children);
        }
      }
      return null;
    };

    return TreeList;

  })(TreeListBase);

  window.TreeList = TreeList;

  TreeList2 = (function(superClass) {
    extend(TreeList2, superClass);

    function TreeList2(containerNode, dataSource) {
      this.containerNode = containerNode;
      this.dataSource = dataSource != null ? dataSource : null;
      TreeList2.__super__.constructor.call(this, this.containerNode, this.dataSource = null);
      $(this.containerNode).on("click", "span.review", (function(_this) {
        return function(event) {
          var t, updateEvent;
          t = $(event.target);
          t.parent().removeClass('treeListItemOver').addClass('treeListItemSelected');
          if (_this.editingItem) {
            _this.editingItem.parent().removeClass('treeListItemSelected');
            _this.editingItem.show();
          }
          _this.editingItem = t;
          updateEvent = jQuery.Event("review");
          updateEvent["itemId"] = t.parent().attr('id');
          return $(_this.containerNode).trigger(updateEvent);
        };
      })(this));
    }

    TreeList2.prototype.renderTree = function(node, data) {
      var i, len, linode, newnode, newnode2, value;
      $(node).append("<ul></ul>");
      newnode = node + " ul:first";
      for (i = 0, len = data.length; i < len; i++) {
        value = data[i];
        if (value.node == null) {
          value.node = 0;
        }
        linode = "<li id='" + value.id + "node" + value.node + "'><div id='" + value.id + "' class='page'><i class='icon-user'></i><span class='nodename'>" + value.label + "</span><span class='review btn btn-warning'>查看</span></div></div></li>";
        if (value.node === 1) {
          linode = "<li id='" + value.id + "node" + value.node + "'><div id='" + value.id + "' class='node'><i class='icon-circle-arrow-down' /><i class='icon-book'></i><span class='nodename'>" + value.label + "</span></div></div></li>";
        }
        $(newnode).append(linode);
        newnode2 = newnode + " #" + value.id + "node" + value.node;
        if (value.children) {
          this.renderTree(newnode2, value.children);
        }
      }
      return null;
    };

    return TreeList2;

  })(TreeListBase);

  window.TreeList2 = TreeList2;

}).call(this);
