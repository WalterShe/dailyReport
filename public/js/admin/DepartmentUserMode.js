// Generated by CoffeeScript 1.10.0
(function() {
  var DepartmemtModel, UserModel;

  DepartmemtModel = (function() {
    function DepartmemtModel() {}

    DepartmemtModel.getAllDepartments = function(callback) {
      return $.get("/admin/alldepartments", function(response) {
        var departments;
        if (response.state === 1) {
          departments = DepartmemtModel.parseDepartments(response.data);
          response['data'] = departments;
        }
        return callback(response);
      }, "json");
    };

    DepartmemtModel.parseDepartments = function(data) {
      var childOfKey, departmentId, key, key2, result, resultObj, value, value2;
      resultObj = {};
      for (key in data) {
        value = data[key];
        childOfKey = key.split(":");
        departmentId = childOfKey[0];
        if (resultObj[departmentId] == null) {
          resultObj[departmentId] = {
            id: departmentId
          };
        }
        if (childOfKey[1] === "name") {
          resultObj[departmentId]["name"] = value;
        } else if (childOfKey[1] === "pid") {
          resultObj[departmentId]["pid"] = value;
        }
      }
      result = [];
      for (key2 in resultObj) {
        value2 = resultObj[key2];
        result.push(value2);
      }
      return result;
    };

    DepartmemtModel.createNewDepartment = function(data, callback) {
      return $.post("/admin/createDepartment", data, function(response) {
        return callback(response);
      }, "json");
    };

    DepartmemtModel.updateDepartment = function(data, callback) {
      return $.post("/admin/updatedepartment", data, function(response) {
        var departments;
        if (response.state === 1) {
          departments = DepartmemtModel.parseDepartments(response.data);
          response['data'] = departments;
        }
        return callback(response);
      }, "json");
    };

    DepartmemtModel.removeDepartment = function(data, callback) {
      return $.post("/admin/removedepartment", data, function(response) {
        var departments;
        if (response.state === 1) {
          departments = DepartmemtModel.parseDepartments(response.data);
          response.data = departments;
        }
        return callback(response);
      }, "json");
    };

    return DepartmemtModel;

  })();

  window.DepartmemtModel = DepartmemtModel;

  UserModel = (function() {
    function UserModel() {}

    UserModel.setAdministrator = function(userId, callback) {
      return $.post("/admin/setadmin", {
        userId: userId
      }, function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.deleteAdministrator = function(userId, callback) {
      return $.post("/admin/deleteadmin", {
        userId: userId
      }, function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.getAdmins = function(callback) {
      return $.post("/admin/getadmins", function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.hasUser = function(userName, callback) {
      return $.post("/admin/hasuser", {
        userName: userName
      }, function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.login = function(data, callback) {
      return $.post("/login", data, function(response) {
        return callback(response);
      }, "json");
    };

    UserModel.createUser = function(data, callback) {
      return $.post("/admin/createuser", data, function(response) {
        var user;
        if (response.state === 1) {
          user = response.data;
          user["name"] = user["userName"];
          delete user["userName"];
          if (user["superiorId"]) {
            user["pid"] = user["superiorId"];
            delete user["superiorId"];
          }
          response.data = user;
          UserModel.allUsers.push(user);
        }
        return callback(response);
      }, "json");
    };

    UserModel.updateUser = function(data, callback) {
      return $.post("/admin/updateuser", data, function(response) {
        var users;
        if (response.state === 1) {
          users = UserModel.parseUsers(response.data);
          response.data = users;
          UserModel.allUsers = users;
        }
        return callback(response);
      }, "json");
    };

    UserModel.changePassword = function(data, callback) {
      return $.post("/password", data, function(response) {
        if (response.state === 1) {
          return callback(response);
        }
      }, "json");
    };

    UserModel.removeUser = function(data, callback) {
      return $.post("/admin/removeuser", data, function(response) {
        var users;
        if (response.state === 1) {
          users = UserModel.parseUsers(response.data);
          response.data = users;
          UserModel.allUsers = users;
        }
        return callback(response);
      }, "json");
    };

    UserModel.getAllUsers = function(callback) {
      return $.get("/admin/getallusers", function(response) {
        var users;
        if (response.state === 1) {
          users = UserModel.parseUsers(response.data);
          response.data = users;
          UserModel.allUsers = users;
        }
        return callback(response);
      }, "json");
    };

    UserModel.allUsers = [];

    UserModel.getLocalAllUsers = function() {
      return this.allUsers;
    };

    UserModel.parseUsers = function(data) {
      var childOfKey, key, key2, result, resultObj, userId, value, value2;
      resultObj = {};
      for (key in data) {
        value = data[key];
        childOfKey = key.split(":");
        userId = childOfKey[0];
        if (resultObj[userId] == null) {
          resultObj[userId] = {
            id: userId
          };
        }
        if (childOfKey[1] === "user_name") {
          resultObj[userId]["name"] = value;
        } else if (childOfKey[1] === "department_id") {
          resultObj[userId]["departmentId"] = value;
        } else if (childOfKey[1] === "superior_id") {
          resultObj[userId]["pid"] = value;
        }
      }
      result = [];
      for (key2 in resultObj) {
        value2 = resultObj[key2];
        result.push(value2);
      }
      return result;
    };

    return UserModel;

  })();

  window.UserModel = UserModel;

}).call(this);
