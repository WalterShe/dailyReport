// Generated by CoffeeScript 1.10.0
(function() {
  var PasswordViewModel, init;

  PasswordViewModel = function() {
    var self, validPassword;
    self = this;
    validPassword = function(password) {
      var pw;
      pw = $.trim(password);
      return pw.length >= 7 && pw.length <= 25;
    };
    self.oldpassword = ko.observable('');
    self.newpassword = ko.observable('');
    self.renewpassword = ko.observable('');
    self.validOldPassword = ko.computed(function() {
      return validPassword(self.oldpassword());
    });
    self.validNewPassword = ko.computed(function() {
      return validPassword(self.newpassword());
    });
    self.validRePassword = ko.computed(function() {
      return $.trim(self.newpassword()) === $.trim(self.renewpassword());
    });
    self.valid = ko.computed(function() {
      return self.validOldPassword() && self.validNewPassword() && self.validRePassword();
    });
    self.submit = function() {
      var data;
      if (self.valid()) {
        data = {
          newPassword: $.trim(self.newpassword()),
          oldPassword: $.trim(self.oldpassword())
        };
        return UserModel.changePassword(data, function(response) {
          if (response.state === 0) {
            return;
          }
          if (response.data === 1) {
            self.oldpassword('');
            self.newpassword('');
            self.renewpassword('');
            $("#successTip").css("display", "block");
            return $("#passwordErrorTip").css("display", "none");
          } else {
            $("#passwordErrorTip").css("display", "block");
            return $("#successTip").css("display", "none");
          }
        });
      } else {
        return console.log("creation fail.");
      }
    };
    return self;
  };

  init = function() {
    var passwordvm;
    passwordvm = new PasswordViewModel();
    return ko.applyBindings(passwordvm);
  };

  init();

}).call(this);
