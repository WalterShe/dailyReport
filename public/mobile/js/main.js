// Generated by CoffeeScript 1.10.0
(function() {
  var NUMOFPAGE, currentPage, deleteReport, getChildNodeById, getDateStr, getReportNum, getReports, getSubordinateUserAndDepartment, init, initPageInfo, isFirstGetReports, isValidDate, isValidLoginUser, isValidPassword, loginPageShowed, pageNum, passwordPageShowed, renderSubordinate, reportTotalNum, reportUserId, reports, self, setPageState, showPageListenerHandlerInited, showPageShowed, showPageination, showPasswordResultTip, subordinatePageShowed, subordinateUserAndDepartments, validator, writePageShowed;

  loginPageShowed = false;

  passwordPageShowed = false;

  writePageShowed = false;

  showPageShowed = false;

  subordinatePageShowed = false;

  showPageListenerHandlerInited = false;

  self = this;

  init = function() {
    var initShowPageListenerHandler;
    if (window.mobileInitFinished) {
      return;
    }
    window.mobileInitFinished = true;
    console.log("mobile init.");
    $("body").on("pageshow", "#logoutPage", function(e) {
      return Model.logout(function(response) {
        if (response.state === 0) {
          return;
        }
        return $.mobile.changePage("/m/login");
      });
    });
    $("body").on("pageshow", "#loginPage", function(e) {
      if (loginPageShowed) {
        return;
      }
      loginPageShowed = true;
      return $("#loginSubmitBtn").on("click", function() {
        var data;
        if (isValidLoginUser()) {
          data = {
            userName: $.trim($("#userName").val()),
            password: $.trim($("#password").val())
          };
          return Model.login(data, function(response) {
            if (response.state === 0) {
              return;
            }
            if (response.data === 0) {
              $.mobile.changePage("#loginErrorPage", {
                role: "dialog"
              });
            }
            if (response.data === 1) {
              return $.mobile.changePage("write");
            }
          });
        } else {
          return $.mobile.changePage("#loginErrorPage", {
            role: "dialog"
          });
        }
      });
    });
    $("body").on("pageshow", "#passwordPage", function(e) {
      if (passwordPageShowed) {
        return;
      }
      passwordPageShowed = true;
      return $("#passwordSubmitBtn").on("click", function() {
        var data, errorMessage, isvalid, oldPassword, password, ref;
        ref = isValidPassword(), isvalid = ref[0], errorMessage = ref[1];
        if (isvalid) {
          oldPassword = $.trim($("#oldPassword").val());
          password = $.trim($("#password").val());
          data = {
            newPassword: password,
            oldPassword: oldPassword
          };
          return Model.changePassword(data, function(response) {
            if (response.state === 0) {
              return;
            }
            if (response.data === 1) {
              $.trim($("#oldPassword").val(""));
              $.trim($("#password").val(""));
              $.trim($("#repassword").val(""));
              return showPasswordResultTip("恭喜，修改密码成功！");
            } else {
              $.trim($("#oldPassword").val(""));
              return showPasswordResultTip("老密码输入错误，请重新输入老密码！");
            }
          });
        } else {
          return showPasswordResultTip(errorMessage);
        }
      });
    });
    $("body").on("pageshow", "#writePage", function(e) {
      if (writePageShowed) {
        return;
      }
      writePageShowed = true;
      return $("#reportSubmitBtn").on("click", function() {
        var contentStr, data, dateStr;
        if (isValidDate()) {
          dateStr = $.trim($("#dateTxt").val());
          contentStr = $.trim($("#content").val());
          data = {
            date: dateStr,
            content: contentStr
          };
          return Model.createReport(data, function(response) {
            if (response.state === 0) {
              return;
            }
            return window.location.href = "/m/show";
          });
        } else {
          return $.mobile.changePage("#writeErrorPage", {
            role: "dialog"
          });
        }
      });
    });
    initShowPageListenerHandler = function() {
      if (!self.showPageListenerHandlerInited) {
        self.showPageListenerHandlerInited = true;
        $("#reportList").on("taphold", "li", function(e) {
          var reportId;
          reportId = $(this).attr('reportId');
          $("#deleteReportBtn").attr("reportId", reportId);
          $("#deleteReportMenu").popup();
          return $("#deleteReportMenu").popup('open');
        });
        $("#deleteReportMenu").on("click", "#deleteReportBtn", function(e) {
          var reportId;
          reportId = $(this).attr('reportId');
          deleteReport(reportId);
          return $("#deleteReportMenu").popup('close');
        });
        $("#deleteReportMenu").on("click", "#cancelDeleteReportBtn", function(e) {
          return $("#deleteReportMenu").popup('close');
        });
        $("body").on("click", "div.pageination div.pagePre", function(e) {
          currentPage -= 1;
          setPageState();
          return getReports();
        });
        return $("body").on("click", "div.pageination div.pageNext", function(e) {
          console.log("pageNext");
          currentPage += 1;
          setPageState();
          return getReports();
        });
      }
    };
    $("body").on("pageshow", "#showPage", function(e) {
      initPageInfo();
      getReports();
      getReportNum();
      if (showPageShowed) {
        return;
      }
      showPageShowed = true;
      return initShowPageListenerHandler();
    });
    return $("body").on("pageshow", "#subordinatePage", function(e) {
      self.treeData = [];
      $("#subordinatePage a.headerBack").css("display", "none");
      $("#subordinatePage h1").empty();
      $("#subordinatePage h1").append("下属日报");
      getSubordinateUserAndDepartment();
      if (subordinatePageShowed) {
        return;
      }
      subordinatePageShowed = true;
      initShowPageListenerHandler();
      return $("#subordinatePage a.headerBack").click(function() {
        self.treeData.pop();
        renderSubordinate(self.treeData[self.treeData.length - 1], "#subordinatePage div.subordinate");
        $("#subordinatePage h1").empty();
        $("#subordinatePage h1").append($(this).attr("nodeName"));
        if (self.treeData.length === 1) {
          $("#subordinatePage a.headerBack").css("display", "none");
          $("#subordinatePage h1").empty();
          return $("#subordinatePage h1").append("下属日报");
        }
      });
    });
  };

  isValidLoginUser = function() {
    var pw, un;
    un = $.trim($("#userName").val());
    pw = $.trim($("#password").val());
    return un.length >= 2 && un.length <= 25 && pw.length >= 7 && pw.length <= 25;
  };

  showPasswordResultTip = function(message) {
    $("#passwordErrorPage p.content").empty();
    $("#passwordErrorPage p.content").append(message);
    return $.mobile.changePage("#passwordErrorPage", {
      role: "dialog"
    });
  };

  isValidPassword = function() {
    var oldPassword, password, repassword, result1, result2;
    result1 = true;
    result2 = "";
    oldPassword = $.trim($("#oldPassword").val());
    password = $.trim($("#password").val());
    repassword = $.trim($("#repassword").val());
    if (oldPassword.length < 7 || oldPassword.length > 25) {
      result1 = false;
      result2 = "密码长度是7-25个字符";
      return [result1, result2];
    }
    if (password.length < 7 || password.length > 25) {
      result1 = false;
      result2 = "密码长度是7-25个字符";
      return [result1, result2];
    }
    if (password === oldPassword) {
      result1 = false;
      result2 = "新密码和老密码相同，请输入一个不同的新密码";
      return [result1, result2];
    }
    if (password !== repassword) {
      result1 = false;
      result2 = "两次输入的新密码不一致";
      return [result1, result2];
    }
    return [result1, result2];
  };

  getDateStr = function(date) {
    var month, today, year;
    today = new Date();
    year = date.getFullYear();
    month = date.getMonth() + 1;
    date = date.getDate();
    return year + "-" + month + "-" + date;
  };

  validator = new Validator();

  isValidDate = function() {
    var contentStr, date, dateStr, error, error1, months, ref, year;
    dateStr = $.trim($("#dateTxt").val());
    contentStr = $.trim($("#content").val());
    try {
      validator.check(contentStr).notEmpty();
      validator.check(dateStr).notEmpty();
      ref = dateStr.split("-"), year = ref[0], months = ref[1], date = ref[2];
      validator.check(year).notNull().isNumeric().len(4, 4);
      validator.check(months).notNull().isNumeric().len(1, 2);
      validator.check(date).notNull().isNumeric().len(1, 2);
      return true;
    } catch (error1) {
      error = error1;
      return false;
    }
  };

  NUMOFPAGE = 6;

  reports = [];

  reportTotalNum = 0;

  pageNum = 0;

  currentPage = 1;

  reportUserId = null;

  isFirstGetReports = true;

  initPageInfo = function() {
    reports = [];
    reportTotalNum = 0;
    pageNum = 0;
    currentPage = 1;
    return reportUserId = null;
  };

  getReports = function() {
    var data;
    data = {
      page: currentPage,
      numOfPage: NUMOFPAGE,
      userId: reportUserId
    };
    return Model.getReports(data, function(response) {
      var i, len, ref, report, reportHTML, results;
      if (response.state === 0) {
        return;
      }
      reports = [];
      $("#reportList ul").empty();
      ref = response.data;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        report = ref[i];
        reports.push(report);
        reportHTML = "<li class='report' reportId='" + report.id + "'><p class='date'><i class='icon-calendar'></i><span>" + report.date + "</span></p> <div class='content'>" + report.content + "</div></li>";
        $("#reportList ul").append(reportHTML);
        results.push(setTimeout(showPageination, 1000));
      }
      return results;
    });
  };

  showPageination = function() {
    return $("div.pageination").css("opacity", 1);
  };

  deleteReport = function(reportId) {
    return Model.deleteReport({
      reportId: reportId
    }, function(response) {
      if (response.state === 0) {
        return;
      }
      reportTotalNum -= 1;
      if (reports.length === 1 && currentPage > 1) {
        currentPage -= 1;
      }
      setPageState();
      return getReports();
    });
  };

  getReportNum = function() {
    return Model.getReportNum(reportUserId, function(response) {
      if (response.state === 1) {
        reportTotalNum = response.data;
        return setPageState();
      }
    });
  };

  setPageState = function() {
    pageNum = Math.ceil(reportTotalNum / NUMOFPAGE);
    if (pageNum === 0) {
      pageNum = 1;
    }
    $("div.pagetip").empty();
    $("div.pagetip").append(currentPage + "/" + pageNum);
    if (pageNum === 1) {
      return $("div.pageination").hide();
    } else if (currentPage === 1) {
      $("div.pageination").show();
      $("div.pagePre").hide();
      return $("div.pageNext").show();
    } else if (currentPage === pageNum) {
      $("div.pageination").show();
      $("div.pagePre").show();
      return $("div.pageNext").hide();
    } else {
      $("div.pageination").show();
      $("div.pagePre").show();
      return $("div.pageNext").show();
    }
  };

  subordinateUserAndDepartments = null;

  getSubordinateUserAndDepartment = function() {
    return Model.getSubordinateUserAndDepartment(function(response) {
      if (response.state === 0) {
        return;
      }
      subordinateUserAndDepartments = response.data;
      return renderSubordinate(subordinateUserAndDepartments, "#subordinatePage div.subordinate", true);
    });
  };

  self.treeData = [];

  renderSubordinate = function(data, nodeContainer, pushStack) {
    var i, len, node, nodeData, treeNodeData;
    if (pushStack == null) {
      pushStack = false;
    }
    $(nodeContainer).empty();
    $(nodeContainer).append("<ul class='root' data-role='listview' data-theme='b' data-inset='true' data-filter='true'></ul>");
    treeNodeData = [];
    node = nodeContainer + " ul.root";
    for (i = 0, len = data.length; i < len; i++) {
      nodeData = data[i];
      treeNodeData.push(nodeData);
      if (nodeData.children) {
        $(node).append("<li id='" + nodeData.id + "-node' nodeName='" + nodeData.label + "' onclick='clickNode(event)'><a href='#'>" + nodeData.label + "</a></li>");
      } else {
        $(node).append("<li id='" + nodeData.id + "-node' nodeName='" + nodeData.label + "' onclick='showUserReport(event)'><a href='#'>" + nodeData.label + "</a></li>");
      }
    }
    if (pushStack) {
      treeData.push(treeNodeData);
    }
    return $(nodeContainer + " ul.root").listview();
  };

  window.clickNode = function(event) {
    var _, id, nodeName, ref;
    ref = $(event.currentTarget).attr("id").split("-"), id = ref[0], _ = ref[1];
    nodeName = $(event.currentTarget).attr("nodeName");
    $("#subordinatePage a.headerBack").css("display", "inline");
    $("#subordinatePage a.headerBack").attr("nodeName", nodeName);
    $("#subordinatePage h1").empty();
    return getChildNodeById(subordinateUserAndDepartments, id);
  };

  getChildNodeById = function(dataSource, id) {
    var i, len, nodeData;
    for (i = 0, len = dataSource.length; i < len; i++) {
      nodeData = dataSource[i];
      if (nodeData.id === id) {
        $("#subordinatePage h1").append(nodeData.label);
        renderSubordinate(nodeData.children, "#subordinatePage div.subordinate", true);
        return;
      }
      if (nodeData.children) {
        getChildNodeById(nodeData.children, id);
      }
    }
  };

  window.showUserReport = function(event) {
    var _, id, label, ref;
    ref = $(event.currentTarget).attr("id").split("-"), id = ref[0], _ = ref[1];
    label = $(event.currentTarget).attr("nodeName");
    $("#subordinatePage div.subordinate").empty();
    $("#subordinatePage div.subordinate").append('<article id="reportList" > <ul></ul> </article> <div class="ui-grid-d pageination" > <div class="ui-block-a aligncenter" title="前一页"><div class="pagePre" ><button data-icon="arrow-l" data-iconpos="notext" data-inline="true"></button></div></div> <div class="ui-block-b"></div> <div class="ui-block-c pagetip">1/1</div> <div class="ui-block-d"></div> <div class="ui-block-e aligncenter" title="下一页"><div class="pageNext" ><button data-icon="arrow-r" data-iconpos="notext" data-inline="true"></button></div></div> </div>');
    $("#subordinatePage h1").empty();
    $("#subordinatePage h1").append(label + "的日报");
    $("#subordinatePage a.headerBack").css("display", "inline");
    $("#subordinatePage div.pagePre button").button();
    $("#subordinatePage div.pageNext button").button();
    treeData.push(label);
    initPageInfo();
    reportUserId = id;
    getReports();
    return getReportNum();
  };

  window.init = init;

}).call(this);
